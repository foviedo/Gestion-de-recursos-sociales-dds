1- Es necesario modelar una nueva subclase para los medios de pago de rapipago, pago f√°cil, mastercard y visa? No, porque comparten el mismo comportamiento entre ellos (rapipago y pago f√°cil), (mastercard y visa)
2- Conviene modelar medio de pago como una interface o como una abstract class?
No hab√≠a mucha informaci√≥n respecto a esto, pero decidimos ir por una interfaz ya que no encontramos comportamiento compartido entre los medios de pago
3- Qu√© atributo le ponemos al medio de pago de efectivo?
Para solucionarlo sin hacernos muchos problemas le agregamos un identificador
4- La organizaci√≥n es usuario del sistema o deber√≠a ser una clase inclu√≠da en el dominio?
Moment√°neamente decidimos incluirla como una clase para tenerlo como punto de partida 
5- ¬øC√≥mo reflejamos en caracter√≠sticas en la creaci√≥n que las entidades jur√≠dicas pueden tener o no entidades bases, y que las bases corresponden a una sola jur√≠dica? Pensamos en que a la hora de tener un constructor o un builder se puede enlazar a los dos objetos facilmente.
6- La organizaci√≥n deber√≠a tener una lista de entidades jur√≠dicas y bases que implementen una interfaz o solo una lista de entidades jur√≠dicas que conozcan a sus entidades base? Terminamos decidiendo por lo primero en caso de que a futuro nos pidan operar sobre la lista de la organizacion.
7- Relacionado con 5, ten√≠amos 3 opciones viables: a) que cada entidad jur√≠dica tenga una lista por la que pueda conocer a sus entidades bases, y √©stas, tengan un atributo que se relacione, √©sto ten√≠a un problema de bad smell. b) que cada entidad jur√≠dica solo tenga la lista de entidades bases c) que solo las entidades bases puedan conocer a sus entidades jur√≠dicas. Terminamos eligiendo a la tercera, pero dejamos esta estructura sensible a cambios en el futuro dependiendo los requerimientos que nos pidan.
8- Las empresas y las OSC pueden ser implementadas por herencia o mediante composici√≥n. Terminamos decidiendo por usar herencia ya que no vemos que tenga sentido (y creemos que legalmente no est√° permitido) que una organizaci√≥n cambie de un enfoque lucrativo a una beneficiencia social.

Validadores de Passwords:
1- Debe tener entre 8 y 16 caracteres, al menos un d√≠gito, una min√∫scula, una may√∫scula y un caracter no alfanum√©rico
2- No debe ser un password com√∫n
3- No debe ser un derivado del nombre de usuario
4- No debe contener caracteres repetitivos consecutivos

SEGUNDA ENTREGA

1- øCÛmo asociamos un presupuesto a los items que le corresponden? Decidimos, para no pisar lo que hicimos
en la primer entrega, y no establecer relaciones que estÈn de m·s, que el presupuesto conozca a sus items
a travÈs de los egresos.

2- Decidimos modelar a los cÛdigos postales como clases que contengan los datos necesarios y se encargue de
obtener dicha informaciÛn de la API de mercado libre.

 